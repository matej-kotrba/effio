generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_in        Int?    @default(0)
  expires_at        Int?    @default(0)
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                          String                        @id @default(cuid())
  name                        String?
  slug                        String?                       @unique
  description                 String?                       @db.Text
  email                       String?                       @unique
  emailVerified               DateTime?
  image                       String?
  role                        UserRoles                     @default(USER)
  accounts                    Account[]
  sessions                    Session[]
  tests                       Test[]
  testRecords                 TestRecord[]
  markSystems                 MarkSystem[]
  groups                      GroupOnUsers[]
  groupsOwned                 UserOnGroupBan[]
  bannedFromGroups            Group[]
  staredTests                 TestStar[]
  GroupSubcategoreyMessage    GroupSubcategoryMessage[]
  userSubcategoryTestStartLog UserSubcategoryTestStartLog[]
  followingUsers              UserFollow[]                  @relation("following")
  followedUsers               UserFollow[]                  @relation("followed")
  adminLogs                   AdminLogs[]

  @@index([name, id])
}

model UserFollow {
  id         String   @id @default(uuid())
  followerId String
  followedId String
  createdAt  DateTime @default(now())
  follower   User     @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followed   User     @relation("followed", fields: [followedId], references: [id], onDelete: Cascade)

  @@unique([followerId, followedId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Template {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestionType {
  id        String            @id @default(uuid())
  name      String            @unique
  slug      QuestionTypeSlug  @unique
  createdAt DateTime          @default(now())
  type      QuestionType_type @default(REGULAR)
  questions Question[]
}

model Test {
  id                            String                        @id @default(uuid())
  title                         String
  description                   String                        @db.Text
  published                     Boolean                       @default(false)
  createdAt                     DateTime                      @default(now())
  updatedAt                     DateTime                      @updatedAt
  views                         Int                           @default(0)
  ownerId                       String
  isPublic                      Boolean                       @default(false)
  imageUrl                      String                        @default("")
  type                          TestType                      @default(REGULAR)
  testVersions                  TestVersion[]
  tags                          TagOnTests[]
  stars                         TestStar[]
  owner                         User                          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  subcategories                 GroupSubcategoryOnTests[]
  groupSubcategoryMessage       GroupSubcategoryMessage[]
  userSubcategoryTestStartsLogs UserSubcategoryTestStartLog[]
  randomQuestionOrder           Boolean                       @default(true)

  @@index([ownerId])
  @@index([title])
}

model TestVersion {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  version        Int
  testId         String
  markSystemJSON Json
  totalPoints    Int          @default(0)
  testGroup      Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  questions      Question[]
  records        TestRecord[]

  @@index([testId])
  @@index([version])
}

model Question {
  id        String           @id @default(uuid())
  title     String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  typeId    String
  testId    String
  content   Json
  points    Int              @default(0)
  type      QuestionType     @relation(fields: [typeId], references: [id], onDelete: Cascade)
  test      TestVersion      @relation(fields: [testId], references: [id], onDelete: Cascade)
  records   QuestionRecord[]

  @@index([typeId])
  @@index([testId])
}

model MarkSystem {
  id                String   @id @default(uuid())
  name              String
  markInterfaceJSON Json
  ownerId           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  owner             User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

model TestRecord {
  id                      String            @id @default(uuid())
  title                   String
  description             String            @db.Text
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  testId                  String
  userId                  String?
  subacategoryId          String?
  userPoints              Float             @default(0)
  shouldCountToStatistics Boolean           @default(true)
  test                    TestVersion       @relation(fields: [testId], references: [id], onDelete: Cascade)
  questionRecords         QuestionRecord[]
  user                    User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  subcategory             GroupSubcategory? @relation(fields: [subacategoryId], references: [id], onDelete: Cascade)

  @@index([testId])
  @@index([userId])
  @@index([subacategoryId])
}

model QuestionRecord {
  id           String     @id @default(uuid())
  testRecordId String
  questionId   String
  content      Json
  userPoints   Float      @default(0)
  testRecord   TestRecord @relation(fields: [testRecordId], references: [id], onDelete: Cascade)
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  order        Int        @default(0)

  @@index([testRecordId])
  @@index([questionId])
}

model TagOnTests {
  id     Int    @id @default(autoincrement())
  testId String
  tagId  String
  test   Test   @relation(fields: [testId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([testId])
  @@index([tagId])
}

model Tag {
  id        String       @id @default(uuid())
  name      String
  slug      String       @unique
  color     String       @default("#000000")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  tests     TagOnTests[]
}

model GroupSubcategoryOnTests {
  id            Int              @id @default(autoincrement())
  testId        String
  subcategoryId String
  addedDate     DateTime         @default(now())
  test          Test             @relation(fields: [testId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subcategory   GroupSubcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  numberOfTries Int?
  resetDate     DateTime?

  @@unique([testId, subcategoryId])
  @@index([testId])
  @@index([subcategoryId])
}

model GroupOnUsers {
  id       Int      @id @default(autoincrement())
  userId   String?
  groupId  String?
  joinedAt DateTime @default(now())
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  group    Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([groupId])
}

model Group {
  id                  String             @id @default(uuid())
  name                String
  slug                String             @unique
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  ownerId             String
  imageUrl            String             @default("")
  users               GroupOnUsers[]
  bannedUsers         UserOnGroupBan[]
  owner               User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  groupsSubcategories GroupSubcategory[]
  groupInvites        GroupInvite[]

  @@index([ownerId])
}

model UserOnGroupBan {
  id        Int      @id @default(autoincrement())
  userId    String
  groupId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([groupId])
}

model GroupInvite {
  id        String   @id @default(uuid())
  groupId   String
  createdAt DateTime @default(now())
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
}

model GroupSubcategory {
  id                            String                        @id @default(uuid())
  name                          String
  slug                          String                        @unique
  createdAt                     DateTime                      @default(now())
  updatedAt                     DateTime                      @updatedAt
  groupId                       String
  group                         Group                         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  type                          GroupSubcategoryType          @default(CHAT)
  image                         String?
  tests                         GroupSubcategoryOnTests[]
  testRecords                   TestRecord[]
  messages                      GroupSubcategoryMessage[]
  userSubcategoryTestStartsLogs UserSubcategoryTestStartLog[]

  @@index([name])
  @@index([slug])
  @@index([groupId])
}

model GroupSubcategoryMessage {
  id                 String                       @id @default(uuid())
  groupSubcategoryId String
  senderId           String
  senderType         SubcategoryMessageSenderType @default(USER)
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  title              String?
  content            String?                      @db.Text()
  testId             String?
  groupSubcategory   GroupSubcategory             @relation(fields: [groupSubcategoryId], references: [id], onDelete: Cascade)
  sender             User                         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  test               Test?                        @relation(fields: [testId], references: [id])

  @@index([senderId])
  @@index([groupSubcategoryId])
  @@index([testId])
  @@map("GroupSubcategoreyMessage")
}

model TestStar {
  id        String   @id @default(uuid())
  testId    String
  userId    String
  createdAt DateTime @default(now())
  test      Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([testId, userId])
  @@index([testId])
  @@index([userId])
}

model UserSubcategoryTestStartLog {
  id            String           @id @default(uuid())
  userId        String
  testId        String
  subcategoryId String
  createdAt     DateTime         @default(now())
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  test          Test             @relation(fields: [testId], references: [id], onDelete: Cascade)
  subcategory   GroupSubcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([testId])
  @@index([subcategoryId])
}

model AdminLogs {
  id        String           @id @default(uuid())
  userId    String?
  action    AdminLogsActions
  message   String
  createdAt DateTime         @default(now())
  user      User?            @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([userId])
}

enum UserRoles {
  ADMIN
  USER
}

enum QuestionTypeSlug {
  pickOne
  trueFalse
  connect
  write
  fill
  geography
  image
  programming
  bitmap
}

enum SubcategoryMessageSenderType {
  USER
  AUTOMATED
}

enum AdminLogsActions {
  DELETE_USERS
  BLOCKED_USERS
  CHANGE_USER_ROLE
  DELETE_TESTS
}

enum TestType {
  REGULAR
  PROGRAMMING
}

enum QuestionType_type {
  REGULAR
  PROGRAMMING
}

enum GroupSubcategoryType {
  CHAT
  ANNOUCEMENT
}
