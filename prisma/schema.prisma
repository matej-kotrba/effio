// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_in        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tests         Test[]
  testRecords   TestRecord[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Template {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestionType {
  id         String     @id @default(uuid())
  name       String     @unique
  slug       String     @unique
  createdAt  DateTime   @default(now())
  properties Json       @default("{}")
  questions  Question[]
}

model Test {
  id           String        @id @default(uuid())
  testVersions TestVersion[]
  published    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tags         Tag[]
  stars        Int           @default(0)
  views        Int           @default(0)
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String

  @@index([ownerId])
}

model TestVersion {
  versionId   String       @id @default(uuid())
  title       String
  description String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  version     Int
  testId      String
  testGroup   Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  questions   Question[]
  records     TestRecord[]

  @@index([testId])
  @@index([version])
}

model Question {
  id        String           @id @default(uuid())
  title     String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  type      QuestionType     @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId    String
  test      TestVersion      @relation(fields: [testId], references: [versionId], onDelete: Cascade)
  testId    String
  records   QuestionRecord[]
  content   Json             @default("{}")

  @@index([typeId])
  @@index([testId])
}

model TestRecord {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  test            TestVersion      @relation(fields: [testId], references: [versionId], onDelete: Cascade)
  testId          String
  questionRecords QuestionRecord[]
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String

  @@index([testId])
  @@index([userId])
}

model QuestionRecord {
  id           String     @id @default(uuid())
  testRecord   TestRecord @relation(fields: [testRecordId], references: [id], onDelete: Cascade)
  testRecordId String
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   String
  content      Json

  @@index([testRecordId])
  @@index([questionId])
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tests     Test[]
}
