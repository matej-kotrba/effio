// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_in        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tests         Test[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Template {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestionType {
  id         String     @id @default(uuid())
  name       String
  createdAt  DateTime   @default(now())
  properties Json       @default("{}")
  questions  Question[]
}

model Test {
  id          String     @id @default(uuid())
  title       String
  description String?    @default("")
  published   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String

  @@index([ownerId])
}

model Question {
  id        String       @id @default(uuid())
  title     String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  type      QuestionType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId    String
  test      Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId    String
  content   Json         @default("{}")

  @@index([typeId])
  @@index([testId])
}
