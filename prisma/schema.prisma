// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_in        Int?    @default(0)
  expires_at        Int?    @default(0)
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                       String                    @id @default(cuid())
  name                     String?
  email                    String?                   @unique
  emailVerified            DateTime?
  image                    String?
  accounts                 Account[]
  sessions                 Session[]
  tests                    Test[]
  testRecords              TestRecord[]
  markSystems              MarkSystem[]
  groups                   GroupOnUsers[]
  groupsOwned              Group[]
  GroupSubcategoreyMessage GroupSubcategoryMessage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Template {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuestionType {
  id         String     @id @default(uuid())
  name       String     @unique
  slug       String     @unique
  createdAt  DateTime   @default(now())
  properties Json       @default("{}")
  questions  Question[]
}

model Test {
  id                      String                    @id @default(uuid())
  testVersions            TestVersion[]
  title                   String
  description             String
  published               Boolean                   @default(false)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  isPublic                Boolean                   @default(false)
  tags                    TagOnTests[]
  stars                   Int                       @default(0)
  views                   Int                       @default(0)
  owner                   User                      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId                 String
  subcategories           GroupSubcategoryOnTests[]
  groupSubcategoryMessage GroupSubcategoryMessage[]

  @@index([ownerId])
  @@index([title, description])
}

model TestVersion {
  versionId      String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  version        Int
  testId         String
  testGroup      Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  questions      Question[]
  records        TestRecord[]
  markSystemJSON Json         @default("{}")
  // markSystem   MarkSystem?  @relation(fields: [markSystemId], references: [id], onDelete: Cascade)
  // markSystemId String?
  // @@index([markSystemId])

  @@index([testId])
  @@index([version])
}

model Question {
  id        String           @id @default(uuid())
  title     String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  type      QuestionType     @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId    String
  test      TestVersion      @relation(fields: [testId], references: [versionId], onDelete: Cascade)
  testId    String
  records   QuestionRecord[]
  content   Json             @default("{}")
  points    Int              @default(0)

  @@index([typeId])
  @@index([testId])
}

model MarkSystem {
  id                String   @id @default(uuid())
  name              String
  markInterfaceJSON Json
  owner             User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  // tests             TestVersion[]

  @@index([ownerId])
}

model TestRecord {
  id              String            @id @default(uuid())
  title           String
  description     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  test            TestVersion       @relation(fields: [testId], references: [versionId], onDelete: Cascade)
  testId          String
  questionRecords QuestionRecord[]
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  subcategory     GroupSubcategory? @relation(fields: [subacategoryId], references: [id], onDelete: Cascade)
  subacategoryId  String?
  userPoints      Int               @default(0)

  @@index([testId])
  @@index([userId])
  @@index([subacategoryId])
}

model QuestionRecord {
  id           String     @id @default(uuid())
  testRecord   TestRecord @relation(fields: [testRecordId], references: [id], onDelete: Cascade)
  testRecordId String
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   String
  content      Json
  userPoints   Int        @default(0)

  @@index([testRecordId])
  @@index([questionId])
}

model TagOnTests {
  id     Int     @id @default(autoincrement())
  test   Test?   @relation(fields: [testId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tag    Tag?    @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  testId String?
  tagId  String?

  @@index([testId])
  @@index([tagId])
}

model Tag {
  id        String       @id @default(uuid())
  name      String
  slug      String       @unique
  color     String       @default("#000000")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  tests     TagOnTests[]
}

model GroupSubcategoryOnTests {
  id            Int              @id @default(autoincrement())
  test          Test             @relation(fields: [testId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  subcategory   GroupSubcategory @relation(fields: [subcategoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  testId        String
  subcategoryId String
  addedDate     DateTime         @default(now())

  @@index([testId])
  @@index([subcategoryId])
}

model GroupOnUsers {
  id       Int      @id @default(autoincrement())
  user     User?    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  group    Group?   @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId   String?
  groupId  String?
  joinedAt DateTime @default(now())

  @@index([userId])
  @@index([groupId])
}

model Group {
  id                  String             @id @default(uuid())
  name                String
  description         String             @default("")
  slug                String             @unique
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  users               GroupOnUsers[]
  owner               User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId             String
  groupsSubcategories GroupSubcategory[]
  groupInvites        GroupInvite[]

  @@index([ownerId])
}

model GroupInvite {
  id        String   @id @default(uuid())
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  createdAt DateTime @default(now())

  @@index([groupId])
}

model GroupSubcategory {
  id          String                    @id @default(uuid())
  name        String
  slug        String
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  group       Group                     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String
  tests       GroupSubcategoryOnTests[]
  testRecords TestRecord[]
  messages    GroupSubcategoryMessage[]

  @@index([name])
  @@index([groupId])
}

model GroupSubcategoryMessage {
  id                 String           @id @default(uuid())
  groupSubcategory   GroupSubcategory @relation(fields: [groupSubcategoryId], references: [id], onDelete: Cascade)
  groupSubcategoryId String
  sender             User             @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId           String
  messageType        MessageTypes
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  title              String?
  content            String?
  testId             String?
  test               Test?            @relation(fields: [testId], references: [id])

  @@index([senderId])
  @@index([groupSubcategoryId])
  @@index([testId])
  @@map("GroupSubcategoreyMessage")
}

enum MessageTypes {
  MESSAGE
  TEST
}
